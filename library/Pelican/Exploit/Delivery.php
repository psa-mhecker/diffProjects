<?php
/**
 * Enter description here...
 *
 */

include 'Pelican/Html.php';

class Pelican_Exploit_Delivery {

	var $type;
	var $mode;
	var $remote;
	var $get;

	/**
	 * Enter description here...
	 *
	 * @param unknown_type $type
	 * @return Delivery
	 */
	function Pelican_Exploit_Delivery() {
		global $_DELIVERY;

		$this->conf = $_DELIVERY;
		$this->get = $_GET;

		if (!is_array($this->conf["HOST"][$_SERVER["HTTP_HOST"]])) {
			$this->conf["HOST"][$_SERVER["HTTP_HOST"]] = array($this->conf["HOST"][$_SERVER["HTTP_HOST"]]);
		}
		$this->remote = $this->conf["HOST"][$_SERVER["HTTP_HOST"]][0];
		$this->user = $this->conf["HOST"][$_SERVER["HTTP_HOST"]][1];
		$this->password = $this->conf["HOST"][$_SERVER["HTTP_HOST"]][2];
		if (!$this->remote) {
			$this->error("Vous n'avez pas de Host de destination associé");
			die();
		}
	}

	/**
	 * Enter description here...
	 *
	 */
	function process($type) {
		

		if (!$this->get["remote"]) {
			//echo "<div id=\"wait\">Comparaison des données en cours...</div>";
			//flush();
		}
		
		$this->type = strtoupper($type);

		if (isset($this->type)) {
			if (!$this->get["param"]) {
				if ($this->remote) {
					if (is_array($this->conf[$this->type])) {
					foreach ($this->conf[$this->type] as $actionAllowed=>$action) {
						if ($actionAllowed != "STOP_LIST") {
							foreach ($action as $action=>$table) {
								call_user_func_array(array(&$this, 'get'.$type), array(Pelican::$config['FW_PREFIXE_TABLE'].$table, "", $actionAllowed));
							}
							//} else {
							//							$this->error("Table : ".strtoupper($actionAllowed)." non autorisée dans le différentiel");
						}
					}
					}
				}
			} else {
				call_user_func_array(array(&$this, 'get'.$type), array(Pelican::$config['FW_PREFIXE_TABLE'].$this->get["param"], $this->get["mode"]));
			}
		}
	}
	/** DEBUT DATABASE */



	/**
	 * Enter description here...
	 *
	 * @param unknown_type $table
	 * @param unknown_type $type
	 */
	function getDb($table = '', $mode = "") {

$process = false;

if (is_array($this->conf[$this->type]["STOP_LIST"])) {
		if (!in_array(str_replace(Pelican::$config['FW_PREFIXE_TABLE'],"",$table),$this->conf[$this->type]["STOP_LIST"])) {
			$process = true;
		}
} else {
	$process = true;
}

if (!$table) {
		$oConnection = Pelican_Db::getInstance();
		$tables = $oConnection->getDbInfo('tables');
		foreach ($tables as $table) {
			self::getDb($table, $mode);
		}
		$process = false;
}

if ($process) {
			$oConnection = Pelican_Db::getInstance();
			$fields = $oConnection->getDbInfo('fields', $table);
			foreach($fields as $field) {
				$result[$field["field"]]['field'] = $field['field'];
				$result[$field["field"]]['type'] = $field['type'];
				$result[$field["field"]]['null'] = $field['null'];
				$result[$field["field"]]['key'] = $field['key'];
				$result[$field["field"]]['default'] = $field['default'];
				$result[$field["field"]]['extra'] = $field['extra'];
				$result[$field["field"]]['sequence'] = $field['sequence'];
				$result[$field["field"]]['increment'] = $field['increment'];
				$result[$field["field"]]['length'] = $field['length'];
				$result[$field["field"]]['precision'] = $field['precision'];
				ksort($result);
			}
			$serialize = Serialize($result);

			if ($serialize) {
				if ($mode == "remote") {
					$this->saveData($serialize);
				} else {
					$local = unserialize($serialize);

					$file = $this->getRemoteData("Db",str_replace(Pelican::$config['FW_PREFIXE_TABLE'],"",$table));
					$remote = unserialize($file);
					$remote_keys = $remote;
					$this->output = "";
					foreach ($local as $key=>Pelican_Db::$values) {
						if ($remote[$key]) {
							unset($remote_keys[$key]);
							$dif = array_diff_assoc(Pelican_Db::$values,$remote[$key]);
							if ($dif) {
								$action = "UPD";
								$this->output .= $this->getSQLDb($table, $action, Pelican_Db::$values);
							}
						} else {
							$action = "INS";
							$this->output .= $this->getSQLDb($table, $action, Pelican_Db::$values);
						}
					}

					if ($remote_keys) {
						foreach($remote_keys as $key=>Pelican_Db::$values) {
							$action = "DEL";
							$this->output .= $this->getSQLDb($table, $action, Pelican_Db::$values);
						}
					}

					$this->printOutput($table, $this->output, strtoupper($table));
				}
			} else {
				$this->error("Table ".strtoupper($table)." inexistante");
			}
		}
	}

	/**
	 * Enter description here...
	 *
	 * @param unknown_type $xml
	 * @param unknown_type $keys
	 * @return unknown
	 */
	function getArrayFromDb($xml, $keys, $utf8 = false) {

		$objXML = new xml2Array();
		$arrOutput = $objXML->parse($xml);

		if ($arrOutput && $arrOutput[0]['children']) {
			foreach($arrOutput[0]['children'] as $record) {
				$line = $record['attrs']['LINE'];
				foreach( $record['children'] as $field) {
					if ($field['tagData'] == 'Object' || $field['tagData'] == '(CLOB)') {
						$field['tagData'] = '';
					}
					$value = trim($field['tagData']);
					if (!$utf8 && Pelican_Text::isUTF8($value)) {
						$value = utf8_decode($value);
					}
					$temp[$line][$field['name']] = $value;
				}
			}

			foreach($temp as $val) {
				$k = array();
				foreach($keys as $key) {
					$k[] = $val[$key];
				}
				$values[implode("##",$k)] = $val;
			}

			ksort($values);
		} else {
			$values = array();
		}

		return $values;
	}
	/** FIN DATABASE */

	/** DEBUT DATA */

	/**
	 * Enter description here...
	 *
	 * @param unknown_type $table
	 * @param unknown_type $type
	 */
	function getData($table, $mode = "", $actionAllowed = "") {

		Pelican_Db::$values = array();
		$allowed = $actionAllowed;

		if (!in_array(str_replace(Pelican::$config['FW_PREFIXE_TABLE'],"",$table),$this->conf[$this->type]["STOP_LIST"])) {
			$oConnection = Pelican_Db::getInstance();

			set_time_limit(300);

			$oConnection->allowBind = false;

			$keys = $oConnection->getDbInfo('keys', $table);
			$fields = $oConnection->getDbInfo('fields', $table);

			if ($fields) {
				foreach ($fields as $field) {
					if ($oConnection->isDate($field["type"])){
						$SELECT[] = $oConnection->dateSqlToString($field["field"],true)." as ".$field["field"];
					} else {
						$SELECT[] = $field["field"];
					}
				}
				$sql = "SELECT ".implode(", ",$SELECT)." FROM ".$table;
				$XML = $oConnection->queryXml($sql);

				if ($mode == "remote") {
					$this->saveData($XML);
				} else {
					$local = Pelican_Exploit_Delivery::getArrayFromDbXml($XML, $keys);

					$file = $this->getRemoteData("Data",str_replace(Pelican::$config['FW_PREFIXE_TABLE'],"",$table));

					$remote = Pelican_Exploit_Delivery::getArrayFromDbXml($file, $keys);

					$remote_keys = $remote;

					$this->output = "";

					foreach ($local as $key=>Pelican_Db::$values) {
						if ($remote[$key]) {
							unset($remote_keys[$key]);
							$dif = array_diff_assoc(Pelican_Db::$values,$remote[$key]);
							if ($dif) {
								if ($allowed == "UPD" || !$allowed) {
									$action = "UPD";
									$this->output .= $this->getSQL($table, $action);
								}
							}
						} else {
							if ($allowed == "INS" || $allowed == "UPD" || !$allowed) {
								$action = "INS";
								$this->output .= $this->getSQL($table, $action);
							}
						}
					}

					if ($remote_keys) {
						foreach($remote_keys as $key=>Pelican_Db::$values) {
							if ($allowed == "DEL" || $allowed == "UPD" || ! $allowed) {
								$action = "DEL";
								$this->output .= $this->getSQL($table, $action);
							}
						}
					}

					$this->printOutput($table, $this->output, strtoupper($table));
				}
			} else {
				$this->error("Table ".strtoupper($table)." inexistante");
			}
		}
	}

	/**
	 * Enter description here...
	 *
	 * @param unknown_type $xml
	 * @param unknown_type $keys
	 * @return unknown
	 */
	function getArrayFromDbXml($xml, $keys, $utf8 = false) {

		$objXML = new xml2Array();
		$arrOutput = $objXML->parse($xml);

		if ($arrOutput && $arrOutput[0]['children']) {
			foreach($arrOutput[0]['children'] as $record) {
				$line = $record['attrs']['LINE'];
				foreach( $record['children'] as $field) {
					if ($field['tagData'] == 'Object' || $field['tagData'] == '(CLOB)') {
						$field['tagData'] = '';
					}
					$value = trim($field['tagData']);
					if (!$utf8 && Pelican_Text::isUTF8($value)) {
						$value = utf8_decode($value);
					}
					$temp[$line][$field['name']] = $value;
				}
			}

			foreach($temp as $val) {
				$k = array();
				foreach($keys as $key) {
					$k[] = $val[$key];
				}
				$values[implode("##",$k)] = $val;
			}

			ksort($values);
		} else {
			$values = array();
		}

		return $values;
	}
	/** FIN DATA */

	function getSQLDb($table, $action, $data) {

		$oConnection = Pelican_Db::getInstance();
		switch($action) {
				case "INS":
				{
				$act = "ADD";
				$field = $data["field"]." ".$data["type"];
				if ($data["length"] && !$oConnection->isDate($data["type"]) && !$oConnection->isLob($data["type"])) {
					$field .= "(".$data["length"].")";
				}
				break;
			}
				case "UPD":
				{
				$act = "MODIFY";
				$field = $data["field"]." ".$data["type"];
				if ($data["length"] && !$oConnection->isDate($data["type"]) && !$oConnection->isLob($data["type"])) {
					$field .= "(".$data["length"].")";
				}
				break;
			}
				case "DEL":
				{
				$act = "DROP";
				$field = $data["field"];
				break;
			}
		}

		$return = "ALTER TABLE ".$table." ";
		$return .= $act." (";
		$return .= $field;
		if ($data["default"]) {
			$return .= " DEFAULT ".$data["default"];
		}
		if ($data["null"]) {
			$return .= " NOT NULL ";
		}
		$return .= ");<br />";

		$return = '<b>--'.$table."</b><br />".$return;

		return $return;
	}


	function getSQL($table, $action) {
		

		$oConnection = Pelican_Db::getInstance();

		set_time_limit(300);

		$oConnection->allowBind = false;

		$result = $oConnection->updateTable($action, $table, "", "", "", true);
		$return = htmlentities(implode(";###", $result));
		$return = str_replace("'''", "''", str_replace("\n", "", str_replace(";###", ";<br />", str_replace("'NULL'", "NULL", $return)).";<br>"));
		$return = '<b>--'.$action."</b><br />".$return;

		return $return;
	}

	/**
	 * Enter description here...
	 *
	 * @param unknown_type $param
	 * @return unknown
	 */
	function getRemoteData($type, $param) {
		$url = $this->remote."/library/Pelican/Exploit/public/delivery/get".$type.".php?param=".$param."&mode=remote";
		return $this->loadData($this->getFromUrl($url, $this->user, $this->password));
	}

	function getFromUrl($url, $user = "", $password = "") {
		if ($user) {
			$ch = curl_init();
			curl_setopt($ch, CURLOPT_URL, $url);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
			curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
			curl_setopt($ch, CURLOPT_USERPWD, $user.':'.$password);
			$data = curl_exec($ch);
			curl_close($ch);
			return $data;
		} else {
			return implode("",file($url));
		}

		/*	$parse_url = parse_url($url);

		if ($user) {
		$fp = fsockopen($parse_url['host'], 80, $errno, $errstr, 30); // Connexion (Host + Port)

		if (!$fp) {
		echo $errstr,'(',$errno,')<br />';
		} else {
		$data='';
		$base64 = base64_encode($user.':'.$password); // Login et mot de passe crypté en base64
		fputs($fp,"GET ".$url." HTTP/1.0\r\n\r\nAuthorization: Basic ".$base64."\r\n\r\n"); // Le socket modifiable

		while (!feof($fp)) {
		$data .= fgets($fp, 128); // Récupération des infos
		}
		fclose($fp);
		debug($data);
		}
		return $data; // On affiche la page
		} else {
		return implode("",file($url));
		}*/
	}


	function loadData($value) {
		return base64_decode($value);
	}

	function saveData($value) {
		echo base64_encode($value);
	}

	function printOutput($table, $content = "", $title = "") {

		$head = Pelican_Html::head(Pelican_Html::link(array(href=>"style.css",media=>"screen",rel=>"stylesheet",type=>"text/css")));
		if ($content) {

			if (Pelican::$config["DATABASE_TYPE"] == "oracle") {
				$text = "SET DEFINE OFF;".Pelican_Html::br();
			}
			$text .= $content;

			$return = Pelican_Html::div(array("class"=>"code"),$text);
		} else {
			$return = Pelican_Html::div(array("class"=>"code"),"-- ".$table." : Pas de modifications");
		}
		echo Pelican_Html::html($head.Pelican_Html::body($return));
		echo Pelican_Html::script("document.getElementById('wait').style.display = 'none';");
		flush();
	}

	/**
	 * Enter description here...
	 *
	 * @param unknown_type $msg
	 */
	function error($msg) {
		echo $msg."<br />";
		flush();
	}
}

/* Usage
Grab some XML data, either from a file, URL, etc. however you want. Assume storage in $strYourXML;

$objXML = new xml2Array();
$arrOutput = $objXML->parse($strYourXML);
print_r($arrOutput); //print it out, or do whatever!

*/
class xml2Array {

	var $arrOutput = array();
	var $resParser;
	var $strXmlData;

	function parse($strInputXML) {

		$this->resParser = xml_parser_create ();
		xml_set_object($this->resParser,$this);
		xml_set_element_handler($this->resParser, "tagOpen", "tagClosed");

		xml_set_character_data_handler($this->resParser, "tagData");

		$this->strXmlData = xml_parse($this->resParser,$strInputXML );
		if(!$this->strXmlData) {
			die(sprintf("XML error: %s at line %d",
			xml_error_string(xml_get_error_code($this->resParser)),
			xml_get_current_line_number($this->resParser)));
		}

		xml_parser_free($this->resParser);

		return $this->arrOutput;
	}
	function tagOpen($parser, $name, $attrs) {
		$tag=array("name"=>$name,"attrs"=>$attrs);
		array_push($this->arrOutput,$tag);
	}

	function tagData($parser, $tagData) {
		if(trim($tagData)) {
			if(isset($this->arrOutput[count($this->arrOutput)-1]['tagData'])) {
				$this->arrOutput[count($this->arrOutput)-1]['tagData'] .= $tagData;
				} else {
				$this->arrOutput[count($this->arrOutput)-1]['tagData'] = $tagData;
			}
		}
	}

	function tagClosed($parser, $name) {
		$this->arrOutput[count($this->arrOutput)-2]['children'][] = $this->arrOutput[count($this->arrOutput)-1];
		array_pop($this->arrOutput);
	}
}
?>
