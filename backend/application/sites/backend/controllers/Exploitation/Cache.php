<?php

class Exploitation_Cache_Controller extends Pelican_Controller_Back
{
    protected $administration = true;

    protected $form_name = "cache";

    public function cleanAction()
    {
        $param = $this->getParam('file');

        if (!$param) {
            $param = '*';
        }

        $param = Pelican_Security::execSafeCommandArg($param);

        if ($param) {
            //$param = str_replace('/', '', $param);
            $dir = Pelican::$config["CACHE_FW_ROOT"];
            $cmdCache[] = $this->_buildCleanCommand(Pelican::$config["CACHE_FW_ROOT"], $param);
            $cmdCache[] = $this->_buildCleanCommand(str_replace('application', 'views', Pelican::$config["CACHE_FW_ROOT"]), $param, true);
            $cmdCache[] = $this->_buildCleanCommand(str_replace('application', 'view_compiles', Pelican::$config["CACHE_FW_ROOT"]), $param, true);

            if (is_array($cmdCache)) {
                foreach ($cmdCache as $cmd) {
                    echo($cmd);
                    passthru($cmd);
                    echo(' -> OK<br />');
                }
            }
        }

        exit();
    }

    public function listAction()
    {
        parent::listAction();

        $head = $this->getView()->getHead();

        $_SESSION[APP]["session_start_page_cache"] = $_SERVER['REQUEST_URI'];

        if (!$_GET["tc"]) {
            $aList = $this->_getCacheUsage(Pelican::$config["TEMPLATE_CACHE_ROOT"]);
            $table = Pelican_Factory::getInstance('List', "", "", 0, 0, 0, "liste", "", false);
            $table->setCSS(array(
                "tblalt1",
                "tblalt2",
            ));
            $table->setValues($aList, "", "type");
            $table->addInput(t('POPUP_BUTTON_SELECT'), "button", array(
                "tc" => "lib",
            ), "center");
            $table->addColumn(t('POPUP_MEDIA_LABEL_NEW_FILE'), "lib", "10", "left", "", "tblheader", "lib");
            $this->setResponse($table->getTable());
        } else {
            if ($_GET["clean"] == true) { // PLA20130118 : gestion de la suppression d'un fichier de cache
                $this->cleanAction();
            }
            if (!$_GET["file"]) {
                $aList = $this->_getCacheDir(Pelican::$config["CACHE_FW_ROOT"]."/");
                $table = Pelican_Factory::getInstance('List', "", "", 0, 0, 0, "liste", "", false);
                $table->setCSS(array(
                    "tblalt1",
                    "tblalt2",
                ));
                $table->setValues($aList, "", "type");
                $table->addInput(t('See'), "button", array(
                    "file" => "file",
                ), "center");
                $table->addInput(t('POPUP_LABEL_DEL'), "button", array(
                    "file" => "file",
                    "" => "clean=true",
                ), "center");
                $table->addColumn(t('EXPIRATION'), "date", "10", "center", "", "tblheader");
                $table->addColumn(t('POPUP_MEDIA_LABEL_SIZE'), "size", "10", "center", "", "tblheader");
                $table->addColumn(t('POPUP_MEDIA_LABEL_NEW_FILE'), "name", "90", "left", "", "tblheader");
                $this->setResponse($table->getTable());
                //    echo ("<br /><br /><input class=\"button\" id=\"Supprimer1\" name=\"Supprimer1\" onclick=\"document.location.href='index_child.php?tid=" . $_GET["tid"] . "&tc=" . $_GET["tc"] . "&clean=true'\" type=\"button\" value=\"Tout Supprimer\" />");
                $head->aButton["back"] = $_SESSION[APP]["session_start_page_cache"];
                $_SESSION[APP]["session_start_page_tc"] = $_SERVER['REQUEST_URI'];
            } else {
                $pathinfo = pathinfo($_GET["file"]);
                if ($pathinfo["extension"] == "php") {
                    $cache = unserialize(implode("", file(Pelican::$config["CACHE_FW_ROOT"]."/".$_GET["file"])));
                    directdebug($cache);
                } else {
                    echo("<img src='/library/get_file.php?file=".base64_encode(Pelican::$config["CACHE_FW_ROOT"]."/".$_GET["file"])."' border='0'>");
                }
                $head->aButton["back"] = $_SESSION[APP]["session_start_page_tc"];
            }
        }
    }

    public function editAction()
    {
    }

    protected function _buildCleanCommand($dir, $param, $subdir = false)
    {
        $return = '';
        if (Pelican::$config['DOCUMENT_INIT'] != '/' && substr_count($dir, '/') >= 3) {
            if (is_dir($dir)) {
                $return = "rm -rf " . $dir . ($subdir ? '/*' : '') . "/*" . Pelican_Security::execSafeCommandArg($param) . "* &";
                $return = str_replace("\$", "", $return);
            }
        }

        return $return;
    }

    protected function _getCacheUsage($parentPath)
    {
        $read = "";
        /*$cmd = "find " . $parentPath . "/ -type f -name \"*.php\" -ls | awk '{print $11\"#\";}'";
        $handle = popen($cmd, 'r');
        while (!feof($handle)) {
            $read .= fread($handle, 2096);
        }
        pclose($handle);
        $list = explode("#", $read);*/
        $list = glob($parentPath.'/*');

        if ($list) {
            ksort($list);
            foreach ($list as $fileDir) {
                $fileDir = trim(str_replace($parentPath."/", "", $fileDir));
                if ($fileDir) {
                    $detail = pathinfo($parentPath.$fileDir);
                    $aList[$fileDir] = array(
                        "id" => (count($aList) + 1),
                        "lib" => $fileDir,
                        "url" => "javascript:menu(34,'".$fileDir."');",
                        "pid" => "X1",
                        "order" => $fileDir,
                    );
                }
            }
            $aList["mediabuild"] = array(
                "id" => (count($aList) + 1),
                "lib" => "mediabuild",
                "url" => "javascript:menu(34,'mediabuild');",
                "pid" => "X1",
                "order" => "mediabuild",
            );
            $aList["text"] = array(
                "id" => (count($aList) + 1),
                "lib" => "text",
                "url" => "javascript:menu(34,'text');",
                "pid" => "X1",
                "order" => "text",
            );
            @ksort($aList);
        }

        return $aList;
    }

    protected function _getCacheDir($parentPath)
    {
        if (isset($_GET["tc"])) {
            $_GET["tc"] = Pelican_Security::execSafeCommandArg($_GET["tc"]);
        }
        $_GET["tc"] = str_replace("undefined", "", strtolower($_GET["tc"])); // PLA20130118 nom des fichiers de cache en minuscules // str_replace("/", "_", $_GET["tc"]);
        $_GET["tc"] = str_replace("/", "_", $_GET["tc"]);

        $cmd = "find ".$parentPath." -type f -name \"".str_replace(".php", "", str_replace(".obj", "", $_GET["tc"]))."*\" -ls |awk '{print $11\"#\";}'";
        $handle = popen($cmd, 'r');

        while (!feof($handle)) {
            $read .= fread($handle, 2096);
        }
        pclose($handle);
        $temp = explode("#", $read);
        if ($temp) {
            foreach ($temp as $fileDir) {
                $fileDir = trim($fileDir);
                if ($fileDir) {
                    if ($_GET["tc"]) {
                        $size = "<b>".filesize($fileDir)."</b>";
                        $date = date("d/m/Y", filemtime($fileDir));
                        if ($date == "01/01/2020") {
                            $date = "Permanent";
                        }
                    }
                    if (!(strpos($filedir, "mediabuild_") === false)) {
                        $type = t('Image');
                    } elseif (!(strpos($filedir, "text_") === false)) {
                        $type = t('TEXTE');
                    } else {
                        $type = t('Miscellaneous');
                    }
                    $aList[$fileDir] = array(
                        "name" => basename($fileDir),
                        "file" => str_replace($parentPath, "", $fileDir),
                        "alt" => basename($fileDir),
                        "date" => $date,
                        "size" => $size,
                        "type" => $type,
                        "full" => $fileDir,
                    );
                }
            }
        }

        if ($aList) {
            @ksort($aList);
        }

        return $aList;
    }
}
