<?php
/**
 * __DESC__.
 *
 * @copyright Copyright (c) 2001-2012 Business&Decision
 * @license http://www.interakting.com/license/phpfactory
 *
 * @link http://www.interakting.com
 */

/**
 * __DESC__.
 *
 * @author __AUTHOR__
 */
class Pelican_Exploit
{
    /**
     * __DESC__.
     *
     * @access public
     *
     * @return __TYPE__
     */
    public function Pelican_Exploit()
    {
        $this->dir = Pelican::$config["VAR_ROOT"]."/exploit";
        $this->user_id = $_SESSION[APP]["user"]["id"];
        $this->control();
    }

    /**
     * __DESC__.
     *
     * @access public
     *
     * @return __TYPE__
     */
    public function action()
    {
        $script = Pelican_Html::script(array(type => "text/javascript"), "function doAction(obj) {
				document.getElementById('iFrameExploit').src= document.location.href + '&option=' + obj;
				}");
        $css = Pelican_Html::link(array(media => "screen", rel => "stylesheet", href => "/library/Pelican/Exploit/public/css/exploit.css", type => "text/css"));
        echo "<html>".Pelican_Html::head($css.$script)."<body>";
        if ($_POST["action"]) {
            $temp = explode("&", $_POST["action"]);
            $file = array_shift($temp);
            $param = $temp;
            include dirname(__FILE__)."/".$file.".php";
            echo Pelican_Html::br().Pelican_Html::button(array(onclick => 'top.history.go(-1)'), "Page d'accueil");
        } else {
            $this->showTitle("Exploitation");
            $this->showOptions();
        }
        echo "</body></html>";
    }

    /**
     * __DESC__.
     *
     * @access public
     *
     * @return __TYPE__
     */
    public function control()
    {
        if (!$this->user_id) {
            echo("Veuillez vous identifier en Back Office");
            exit();
        } else {
            if (!is_dir($this->dir)) {
                @mkdir($this->dir);
                @chmod($this->dir, 0777);
            }
        }
    }

    /**
     * __DESC__.
     *
     * @access public
     *
     * @param __TYPE__ $sOption    __DESC__
     * @param __TYPE__ $sLabel     __DESC__
     * @param bool     $bNeedParam (option) __DESC__
     * @param string   $sDefault   (option) __DESC__
     * @param bool     $display    (option) __DESC__
     *
     * @return __TYPE__
     */
    public function setOption($sOption, $sLabel, $bNeedParam = false, $sDefault = "", $display = true)
    {
        $option = array($sOption, $sLabel, $bNeedParam, $sDefault);
        if ($display) {
            echo Pelican_Exploit::displayOption($option);
        }
        $this->aOptions[] = $option;
    }

    /**
     * __DESC__.
     *
     * @access public
     *
     * @return __TYPE__
     */
    public function showOptions()
    {
        if ($this->aOptions) {
            foreach ($this->aOptions as $option) {
                $input = Pelican_Exploit::displayOption($option);
            }
            $action = Pelican_Html::input(array(type => "hidden", name => "action"));
            $return .= Pelican_Html::form(array(method => "post"), implode("<br>", $options).$action);
            echo $return;
        }
    }

    /**
     * __DESC__.
     *
     * @access public
     *
     * @param __TYPE__ $option __DESC__
     *
     * @return __TYPE__
     */
    public function displayOption($option)
    {
        $input = "";
        $input = Pelican_Html::button(array(onclick => "doAction('".$option[0]."');"), $option[1]);
        if ($option[2]) {
            $input .= Pelican_Html::input(array(type => "text", name => $option[0], value => $option[3], size => "50"));
        }

        return $input;
    }

    /**
     * __DESC__.
     *
     * @access public
     *
     * @param __TYPE__ $file   __DESC__
     * @param __TYPE__ $search __DESC__
     *
     * @return __TYPE__
     */
    public function getErrorList($file, $search)
    {
        if (file_exists($file)) {
            $error = $file;
            $log = file($error);
            $log = array_map('find'.$search, $log);
            debug(array_unique($log), $file);
        }
    }

    /**
     * __DESC__.
     *
     * @access public
     *
     * @param __TYPE__ $sTitle __DESC__
     *
     * @return __TYPE__
     */
    public function showTitle($sTitle)
    {
        echo Pelican_Html::div(array(id => "title"), $sTitle);
    }
}

/**
 * __DESC__.
 *
 * @param __TYPE__ $value __DESC__
 * @param __TYPE__ $search __DESC__
 *
 * @return __TYPE__
 */
function findString($value, $search)
{
    if (strstr($value, $search)) {
        return cleanError($value);
    } else {
        return "";
    }
}

/**
 * __DESC__.
 *
 * @param __TYPE__ $value __DESC__
 *
 * @return __TYPE__
 */
function findError($value)
{
    return findString($value, "ErrorLog");
}

/**
 * __DESC__.
 *
 * @param __TYPE__ $value __DESC__
 *
 * @return __TYPE__
 */
function cleanError($value)
{
    if ($value{0} != "#") {
        $return = trim(str_replace("ErrorLog", "", str_replace("\"", "", $value)));
    }
    if ($return && $return{0} != "/") {
        $return = str_replace("/bin", "/", $_ENV["PWD"]).$return;
    }

    return $return;
}

/**
 * __DESC__.
 *
 * @param __TYPE__ $line __DESC__
 *
 * @return __TYPE__
 */
function analyseLog($line)
{
    if (preg_match('!^([^ ]+) ([^ ]+) ([^ ]+) \[([^\]]+)\] "([^ ]+) ([^ ]+) ([^/]+)/([^"]+)" ([^ ]+) ([^ ]+) ([^ ]+) (.+)!', $line, $elements)) {
        return $elements;
    }
}

/**
 * $string1 = 'www.something.com 66.196.91.121 - - [01/Sep/2005:04:20:39 +0200]
 * "GET /robots.txt HTTP/1.0" 200 49 "-"';
 * $string2= '%Domain% %IP% - %User% \[%Date%:%Time% %TimeZone%\] "%Method%
 * %Request% %Protocol%" %ServerCode% %Bytes% "%Referer%"';.
 *
 * Print_r (string2array ($string1, $string2));
 * Array
 *
 * (
 * [ServerAddress] => www.something.com
 * [IP] => 66.196.91.121
 * [User] => -
 * [Date] => 01/Sep/2005
 * [Time] => 04:20:39
 * [TimeZone] => +0200
 * [Method] => GET
 * [Request] => /robots.txt
 * [Protocol] => HTTP/1.0
 * [ServerCode] => 200
 * [Bytes] => 49
 * [Referer] => -
 * )
 *
 * @param string $string __DESC__
 * @param __TYPE__ $template __DESC__
 *
 * @return __TYPE__
 */
function string2array($string, $template)
{
    //search defined dividers
    preg_match_all("|%(.+)%|U", $template, $template_matches);
    //replace dividers with "real dividers"
    $template = preg_replace("|%(.+)%|U", "(.+)", $template);
    //search matches
    preg_match("|".$template."|", $string, $string_matches);
    //[template_match] => $string_match
    foreach ($template_matches[1] as $key => $value) {
        $output[$value] = $string_matches[($key + 1) ];
    }

    return $output;
}
